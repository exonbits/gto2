[["index.html", "GTO 2: The genomics-proteomics toolkit Preface License", " GTO 2: The genomics-proteomics toolkit J. R. Almeida, A. J. Pinho, J. L. Oliveira, D. Pratas 2021-04-24 Preface License This document was written in RMarkdown using the bookdown package. "],["introduction.html", "Chapter 1 Introduction 1.1 Installation 1.2 Testing 1.3 Execution control", " Chapter 1 Introduction Recent advances in DNA sequencing, specifically in next-generation sequencing (NGS), revolutionised the field of genomics, making possible the generation of large amounts of sequencing data very rapidly and at substantially low cost(Mardis 2017). This new technology also brought with it several challenges, namely in what concerns the analysis, storage, and transmission of the generated sequences(Brouwer et al. 2016,L. Liu et al. (2012)). As a consequence, several specialised tools were developed throughout the years in order to deal with these challenges. Firstly, the storage of the raw data generated by NGS experiments is possible by using several file formats, the FASTQ and FASTA are the most commonly used(Zhang 2016). FASTQ is an extension of the FASTA format, that besides the nucleotide sequence, also stores associated per base quality score and it is considered the standard format for sequencing data storage and exchange(Cock et al. 2009). Regarding the analysis and manipulation of these sequencing data files many software applications emerged, including fqtools(Droop 2016), FASTX-Toolkit(Gordon, Hannon, and others 2010), GALAXY(Afgan et al. 2018), GATK(DePristo et al. 2011), MEGA(Kumar, Stecher, and Tamura 2016), SeqKit(Shen et al. 2016), among others. Fqtools is a suite of tools to view, manipulate and summarise FASTQ data. This software also identifies invalid FASTQ files(Droop 2016). GALAXY, in its turn, is an open, web-based scientific platform for analysing genomic data(Goecks, Nekrutenko, and Taylor 2010). This platform integrates several specialised sets of tools, e.g. for manipulating FASTQ files(Blankenberg et al. 2010). FASTX-Toolkit is a collection of command-line tools to process FASTA and FASTQ files. This toolkit is available in two forms: as a command-line, or integrated into the web-based platform GALAXY(Gordon, Hannon, and others 2010). SeqKit is another toolkit used to process FASTA and FASTQ files and is available for all major operating systems(Shen et al. 2016). The Genome Analysis Toolkit (GATK) was designed as a structured programming framework to simplify the development of analysis tools. However, nowadays, it is a suite of tools focused on variant discovering and genotyping(Van der Auwera et al. 2013). More towards the evolutionary perspectives, Molecular Evolutionary Genetics Analysis (MEGA) software provides tools to analyse DNA and protein sequences statistically(Tamura et al. 2011). Several of these frameworks lack on variety, namely the ability to perform multiple tasks using only one toolkit. Compression is another important aspect when dealing with high-throughput sequencing data, as it reduces storage space and accelerates data transmission. A survey on DNA compressors and amino acid sequence compression can be found in(Hosseini, Pratas, and Pinho 2016). Currently, the DNA sequence compressors HiRGC(Y. Liu et al. 2017), iDoComp(Ochoa, Hernaez, and Weissman 2014), GeCo(Pratas, Pinho, and Ferreira 2016), and GDC(Deorowicz, Danek, and Niemiec 2015) are considered to have the best performance(Hernaez et al. 2019). Of these four approaches, GeCo is the only one that can be used for reference-free and reference-based compression. Furthermore, GeCo can be used as an analysis tool to determine absolute measures for many distance computations and local measures(Pratas, Pinho, and Ferreira 2016). Amino acid sequences are known to be very hard to compress(Nalbantoglu, Russell, and Sayood 2010), however, Hosseini et al.(Hosseini, Pratas, and Pinho 2019) recently developed AC, a state-of-the-art for lossless amino acid sequence compression. In(Pratas, Hosseini, and Pinho 2018) the authors compared the performance of AC, in terms of bit-rate, to several general-purpose lossless compressors and several protein compressors, using different proteomes. They concluded that in average AC provides the best bit-rates. Another relevant subject is genomic data simulation. Read simulations tools are fundamental for the development, testing and evaluation of methods and computational tools(Huang et al. 2011,price2017simulome). Despite the availability of a large number of real sequence reads, read simulation data is necessary due to the inability to know the ground truth of real data(Baruzzo et al. 2017). Escalona (Escalona, Rocha, and Posada 2016), recently, reviewed 23 NGS simulation tools. XS(Pratas, Pinho, and Rodrigues 2014), a FASTQ read simulation tool, stands out in relation to the other 22 simulation tools because it is the only one that does not need a reference sequence. Furthermore, XS is the only open-source tool for simulation of FASTQ reads produced by the four most used sequencing machines, Roche-454, Illumina, ABI SOLiD and Ion Torrent. Although a large number of tools are available for analysing, compressing, and simulation, these tools are specialised in only a specific task. Besides, in many cases the output of one tool cannot be used directly as input for another tool, e.g. the output of a simulation tool cannot always be used directly as input for an analysis tool. Thus, unique software that includes several specialised tools is necessary. In this document, we describe GTO2, a complete toolkit for genomics and proteomics, namely for FASTQ, FASTA and SEQ formats, with many complementary tools. The toolkit is for Unix-based systems, built for ultra-fast computations. GTO2 supports pipes for easy integration with the sub-programs belonging to GTO2 as well as external tools. GTO2 works as LEGOs, since it allows the construction of multiple pipelines with many combinations. GTO2 includes tools for information display, randomisation, edition, conversion, extraction, search, calculation, compression, simulation and visualisation. GTO2 is prepared to deal with very large datasets, typically in the scale of Gigabytes or Terabytes (but not limited). The complete toolkit is an optimised command-line version, using the prefix gto2_ followed by the suffix with the respective name of the program. GTO2 is implemented in C language and it is available, under the MIT license, at https://github.com/cobilab/gto2 1.1 Installation To install GTO2 through the GitHub repository: git clone https://github.com/cobilab/gto2.git cd gto2/src/ make Or by installing them directly using the Cobilab channel from Conda: conda install -c cobilab gto2 -y 1.2 Testing The examples provided in this document are available in the repository. Therefore, each example can be easily reproduced, which it will also test and validate each tool. To replicate those tests, it can be done in two different ways: Running one test for a specific tool: cd gto2/tester/gto2_{tool} sh runExample.sh Running the batch of tests for all the tools: cd gto2/tester/ sh runAllTests.sh Some of these tests require internet connection to download external files and it will create new files. 1.3 Execution control The quality control in Unix/Linux pipelines using GTO's tools is made in three ways: Input verification: where the tools verify the format of the input file; Stderr logs: Some execution errors are directly sent for the stderr channel. Scripting validation: In complex pipelines, the verification of all the tools in the pipeline were executed properly, it is used the PIPESTATUS variable, e.g.: gto2_fa_rand_extra_chars &lt; input.fa | \\ gto2_fa_to_seq &gt; output.seq echo &quot;${PIPESTATUS[0]} ${PIPESTATUS[1]}&quot; 0 0 References "],["fasta-tools.html", "Chapter 2 FASTA Tools 2.1 gto2_fa_to_fq", " Chapter 2 FASTA Tools 2.1 gto2_fa_to_fq to do "],["fastq-tools.html", "Chapter 3 FASTQ Tools 3.1 Program gto2_fq_to_fa 3.2 Program gto2_fq_to_mfa 3.3 Program gto2_fq_exclude_n 3.4 Program gto2_fq_extract_quality_scores 3.5 Program gto2_fq_info 3.6 Program gto2_fq_maximum_read_size 3.7 Program gto2_fq_minimum_quality_score 3.8 Program gto2_fq_minimum_read_size 3.9 Program gto2_fq_rand_extra_chars 3.10 Program gto2_fq_from_seq 3.11 Program gto2_fq_mutate 3.12 Program gto2_fq_split 3.13 Program gto2_fq_pack 3.14 Program gto2_fq_unpack 3.15 Program gto2_fq_quality_score_info 3.16 Program gto2_fq_quality_score_min 3.17 Program gto2_fq_quality_score_max 3.18 Program gto2_fq_cut 3.19 Program gto2_fq_minimum_local_quality_score_forward 3.20 Program gto2_fq_minimum_local_quality_score_reverse 3.21 Program gto2_fq_xs 3.22 Program gto2_fq_complement 3.23 Program gto2_fq_reverse 3.24 Program gto2_fq_variation_map 3.25 Program gto2_fq_variation_filter 3.26 Program gto2_fq_variation_visual 3.27 Program gto2_fq_metagenomics", " Chapter 3 FASTQ Tools The toolkit has a set of tools dedicated to manipulating FASTQ files. Some of these tools allow the data conversion to/from different formats, i. e., there are tools designed to convert a FASTQ file into a sequence or a FASTA/Multi-FASTA format, or converting DNA in some of those formats to FASTQ. There are also tools for data manipulation in this format, which are designed to exclude 'N', remove low quality scored reads, following different metrics and randomize DNA sequences. Succeeding the manipulation, it is also possible to perform analyses over these files, simulations and mutations. The current available tools for FASTQ format analysis and manipulation include: gto2_fq_to_fa: to convert a FASTQ file format to a pseudo FASTA file. gto2_fq_to_mfa: to convert a FASTQ file format to a pseudo Multi-FASTA file. gto2_fq_exclude_n: to discard the FASTQ reads with the minimum number of &quot;N&quot; symbols. gto2_fq_extract_quality_scores: to extract all the quality-scores from FASTQ reads. gto2_fq_info: to analyse the basic information of FASTQ file format. gto2_fq_maximum_read_size: to filter the FASTQ reads with the length higher than the value defined. gto2_fq_minimum_quality_score: to discard reads with average quality-score below of the defined. gto2_fq_minimum_read_size: to filter the FASTQ reads with the length smaller than the value defined. gto2_fq_rand_extra_chars: to substitue in the FASTQ files, the DNA sequence the outside ACGT chars by random ACGT symbols. gto2_fq_from_seq: to convert a genomic sequence to pseudo FASTQ file format. gto2_fq_mutate: to create a synthetic mutation of a FASTQ file given specific rates of mutations, deletions and additions. gto2_fq_split: to split Paired End files according to the direction of the strand ('/1' or '/2'). gto2_fq_pack: to package each FASTQ read in a single line. gto2_fq_unpack: to unpack the FASTQ reads packaged using the gto2_fq_pack tool. gto2_fq_quality_score_info: to analyse the quality-scores of a FASTQ file. gto2_fq_quality_score_min: to analyse the minimal quality-scores of a FASTQ file. gto2_fq_quality_score_max: to analyse the maximal quality-scores of a FASTQ file. gto2_fq_cut: to cut read sequences in a FASTQ file. gto2_fq_minimum_local_quality_score_forward: to filter the reads considering the quality score average of a defined window size of bases. gto2_fq_minimum_local_quality_score_reverse: to filter the reverse reads, considering the average window size score defined by the bases. gto2_fq_xs: a skilled FASTQ read simulation tool, flexible, portable and tunable in terms of sequence complexity. gto2_fq_complement: to replace the ACGT bases with their complements in a FASTQ file format. gto2_fq_reverse: to reverse the ACGT bases order for each read in a FASTQ file format. gto2_fq_variation_map: to identify the variation that occours in the sequences relative to the reads or a set of reads. gto2_fq_variation_filter: to filter and segments the regions of singularity from the output of gto2_fq_variation_map. gto2_fq_variation_visual: to depict the regions of singularity using the output from gto2_fq_variation_filter into an SVG image. gto2_fq_metagenomics: to measure the similarity between any FASTQ file, independently from the size, against any multi-FASTA database. 3.1 Program gto2_fq_to_fa The gto2_fq_to_fa converts a FASTQ file format to a pseudo FASTA file. However, this tool does not align the sequence, instead, it extracts the sequence and adds a pseudo-header. For help type: ./gto2_fq_to_fa -h In the following subsections, we explain the input and output parameters. Input parameters The gto2_fq_to_fa program needs two streams for the computation, namely the input and output standard. The input stream is a FASTQ file. The attribution is given according to: Usage: ./gto2_fq_to_fa [options] [[--] args] or: ./gto2_fq_to_fa [options] It converts a FASTQ file format to a pseudo FASTA file. It does NOT align the sequence. It extracts the sequence and adds a pseudo header. -h, --help show this help message and exit Basic options &lt; input.fastq Input FASTQ file format (stdin) &gt; output.fasta Output FASTA file format (stdout) Example: ./gto2_fq_to_fa &lt; input.fastq &gt; output.fasta An example of such an input file is: @SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=60 GGGTGATGGCCGCTGCCGATGGCGTCAAATCCCACCAAGTTACCCTTAACAACTTAAGGG +SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=60 IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9ICIIIIIIIIIIIIIIIIIIIIDIII @SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=60 GTTCAGGGATACGACGTTTGTATTTTAAGAATCTGAAGCAGAAGTCGATGATAATACGCG +SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=60 IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII6IBIIIIIIIIIIIIIIIIIIIIIIIGI Output The output of the gto2_fq_to_fa program is a FASTA file. Using the input above, an output example of this is the following: &gt; Computed with Fastq2Fasta GGGTGATGGCCGCTGCCGATGGCGTCAAATCCCACCAAGTTACCCTTAACAACTTAAGGG GTTCAGGGATACGACGTTTGTATTTTAAGAATCTGAAGCAGAAGTCGATGATAATACGCG 3.2 Program gto2_fq_to_mfa The gto2_fq_to_mfa converts a FASTQ file format to a pseudo Multi-FASTA file. However, this tool does not align the sequence, instead, it extracts the sequence and adds a pseudo header. For help type: ./gto2_fq_to_mfa -h In the following subsections, we explain the input and output parameters. Input parameters The gto2_fq_to_mfa program needs two streams for the computation, namely the input and output standard. The input stream is a FASTQ file. The attribution is given according to: Usage: ./gto2_fq_to_mfa [options] [[--] args] or: ./gto2_fq_to_mfa [options] It converts a FASTQ file format to a pseudo Multi-FASTA file. It does NOT align the sequence. It extracts the sequence and adds each header in a Multi-FASTA format. -h, --help show this help message and exit Basic options &lt; input.fastq Input FASTQ file format (stdin) &gt; output.mfasta Output Multi-FASTA file format (stdout) Example: ./gto2_fq_to_mfa &lt; input.fastq &gt; output.mfasta An example of such an input file is: @SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=60 GGGTGATGGCCGCTGCCGATGGCGTCAAATCCCACCAAGTTACCCTTAACAACTTAAGGG +SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=60 IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9ICIIIIIIIIIIIIIIIIIIIIDIII @SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=60 GTTCAGGGATACGACGTTTGTATTTTAAGAATCTGAAGCAGAAGTCGATGATAATACGCG +SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=60 IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII6IBIIIIIIIIIIIIIIIIIIIIIIIGI Output The output of the gto2_fq_to_mfa program is a Multi-FASTA file. Using the input above, an output example of this is the following: &gt;SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=60 GGGTGATGGCCGCTGCCGATGGCGTCAAATCCCACCAAGTTACCCTTAACAACTTAAGGG &gt;SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=60 GTTCAGGGATACGACGTTTGTATTTTAAGAATCTGAAGCAGAAGTCGATGATAATACGCG 3.3 Program gto2_fq_exclude_n The gto2_fq_exclude_n discards the FASTQ reads with the minimum number of ''N'' symbols, and it will erase the second header (after +), if presented. For help type: ./gto2_fq_exclude_n -h In the following subsections, we explain the input and output parameters. Input parameters The gto2_fq_exclude_n program needs two streams for the computation, namely the input and output standard. The input stream is a FASTQ file. The attribution is given according to: Usage: ./gto2_fq_exclude_n [options] [[--] args] or: ./gto2_fq_exclude_n [options] It discards the FASTQ reads with the minimum number of &quot;N&quot; symbols. If present, it will erase the second header (after +). -h, --help show this help message and exit Basic options -m, --max=&lt;int&gt; The maximum of of &quot;N&quot; symbols in the read &lt; input.fastq Input FASTQ file format (stdin) &gt; output.fastq Output FASTQ file format (stdout) Example: ./gto2_fq_exclude_n -m &lt;max&gt; &lt; input.fastq &gt; output.fastq Console output example : &lt;FASTQ non-filtered reads&gt; Total reads : value Filtered reads : value An example of such an input file is: @SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=60 GNNTGATGGCCGCTGCCGATGGCGNANAATCCCACCAANATACCCTTAACAACTTAAGGG + IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9ICIIIIIIIIIIIIIIIIIIIIDIII @SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=60 NTTCAGGGATACGACGNTTGTATTTTAAGAATCTGNAGCAGAAGTCGATGATAATACGCG + IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII6IBIIIIIIIIIIIIIIIIIIIIIIIGI Output The output of the gto2_fq_exclude_n program is a set of all the filtered FASTQ reads, followed by the execution report. The execution report only appears in the console. Using the input above with the max value as 5, an output example for this is the following: @SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=60 NTTCAGGGATACGACGNTTGTATTTTAAGAATCTGNAGCAGAAGTCGATGATAATACGCG + IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII6IBIIIIIIIIIIIIIIIIIIIIIIIGI Total reads : 2 Filtered reads : 1 3.4 Program gto2_fq_extract_quality_scores The gto2_fq_extract_quality_scores extracts all the quality-scores from FASTQ reads. For help type: ./gto2_fq_extract_quality_scores -h In the following subsections, we explain the input and output parameters. Input parameters The gto2_fq_extract_quality_scores program needs two streams for the computation, namely the input and output standard. The input stream is a FASTQ file. The attribution is given according to: Usage: ./gto2_fq_extract_quality_scores [options] [[--]args] or: ./gto2_fq_extract_quality_scores [options] It extracts all the quality-scores from FASTQ reads. -h, --help show this help message and exit Basic options &lt; input.fastq Input FASTQ file format (stdin) &gt; output.fastq Output FASTQ file format (stdout) Example: ./gto2_fq_extract_quality_scores &lt; input.fastq &gt; output.fastq Console output example: &lt;FASTQ quality scores&gt; Total reads : value Total Quality-Scores : value An example of such an input file is: @SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=60 GGGTGATGGCCGCTGCCGATGGCGTCAAATCCCACCAAGTTACCCTTAACAACTTAAGGG +SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=60 IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9ICIIIIIIIIIIIIIIIIIIIIDIII @SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=60 GTTCAGGGATACGACGTTTGTATTTTAAGAATCTGAAGCAGAAGTCGATGATAATACGCG +SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=60 IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII6IBIIIIIIIIIIIIIIIIIIIIIIIGI Output The output of the gto2_fq_extract_quality_scores program is a set of all the quality scores from the FASTQ reads, followed by the execution report. The execution report only appears in the console. Using the input above, an output example of this is the following: IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9ICIIIIIIIIIIIIIIIIIIIIDIII IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII6IBIIIIIIIIIIIIIIIIIIIIIIIGI Total reads : 2 Total Quality-Scores : 144 3.5 Program gto2_fq_info The gto2_fq_info analyses the basic information of FASTQ file format. For help type: ./gto2_fq_info -h In the following subsections, we explain the input and output parameters. Input parameters The gto2_fq_info program needs two streams for the computation, namely the input and output standard. The input stream is a FASTQ file. The attribution is given according to: Usage: ./gto2_fq_info [options] [[--] args] or: ./gto2_fq_info [options] It analyses the basic information of FASTQ file format. -h, --help show this help message and exit Basic options &lt; input.fastq Input FASTQ file format (stdin) &gt; output Output read information (stdout) Example: ./gto2_fq_info &lt; input.fastq &gt; output Output example: Total reads : value Max read length : value Min read length : value Min QS value : value Max QS value : value QS range : value An example of such an input file is: @SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=60 GGGTGATGGCCGCTGCCGATGGCGTCAAATCCCACCAAGTTACCCTTAACAACTTAAGGG +SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=60 IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9ICIIIIIIIIIIIIIIIIIIIIDIII @SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=60 GTTCAGGGATACGACGTTTGTATTTTAAGAATCTGAAGCAGAAGTCGATGATAATACGCG +SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=60 IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII6IBIIIIIIIIIIIIIIIIIIIIIIIGI Output The output of the gto2_fq_info program is a set of information related to the file read. Using the input above, an output example of this is the following: Total reads : 2 Max read length : 72 Min read length : 72 Min QS value : 41 Max QS value : 73 QS range : 33 3.6 Program gto2_fq_maximum_read_size The gto2_fq_maximum_read_size filters the FASTQ reads with the length higher than the value defined. For help type: ./gto2_fq_maximum_read_size -h In the following subsections, we explain the input and output parameters. Input parameters The gto2_fq_maximum_read_size program needs two streams for the computation, namely the input and output standard. The input stream is a FASTQ file. The attribution is given according to: Usage: ./gto2_fq_maximum_read_size [options] [[--] args] or: ./gto2_fq_maximum_read_size [options] It filters the FASTQ reads with the length higher than the value defined. If present, it will erase the second header (after +). -h, --help show this help message and exit Basic options -s, --size=&lt;int&gt; The maximum read length &lt; input.fastq Input FASTQ file format (stdin) &gt; output.fastq Output FASTQ file format (stdout) Example: ./gto2_fq_maximum_read_size -s &lt;size&gt; &lt; input.fastq &gt; output.fastq Console output example : &lt;FASTQ non-filtered reads&gt; Total reads : value Filtered reads : value An example of such an input file is: @SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=59 GGGTGATGGCCGCTGCCGATGGCGTCAAATCCCACCAAGTTACCCTTAACAACTTAAGG + IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9ICIIIIIIIIIIIIIIIIIIIIDII @SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=60 GTTCAGGGATACGACGTTTGTATTTTAAGAATCTGAAGCAGAAGTCGATGATAATACGCG + IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII6IBIIIIIIIIIIIIIIIIIIIIIIIGI Output The output of the gto2_fq_maximum_read_size program is a set of all the filtered FASTQ reads, followed by the execution report. The execution report only appears in the console. Using the input above with the size values as 59, an output example for this is the following: @SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=59 GGGTGATGGCCGCTGCCGATGGCGTCAAATCCCACCAAGTTACCCTTAACAACTTAAGG + IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9ICIIIIIIIIIIIIIIIIIIIIDII Total reads : 2 Filtered reads : 1 3.7 Program gto2_fq_minimum_quality_score The gto2_fq_minimum_quality_score discards reads with average quality-score below of the defined. For help type: ./gto2_fq_minimum_quality_score -h In the following subsections, we explain the input and output parameters. Input parameters The gto2_fq_minimum_quality_score program needs two streams for the computation, namely the input and output standard. The input stream is a FASTQ file. The attribution is given according to: Usage: ./gto2_fq_minimum_quality_score [options] [[--] args] or: ./gto2_fq_minimum_quality_score [options] It discards reads with average quality-score below value. -h, --help show this help message and exit Basic options -m, --min=&lt;int&gt; The minimum average quality-score (Value 25 or 30 is commonly used) &lt; input.fastq Input FASTQ file format (stdin) &gt; output.fastq Output FASTQ file format (stdout) Example: ./gto2_fq_minimum_quality_score -m &lt;min&gt; &lt; input.fastq &gt; output.fastq Console output example: &lt;FASTQ non-filtered reads&gt; Total reads : value Filtered reads : value An example of such an input file is: @SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=60 GGGTGATGGCCGCTGCCGATGGCGTCAAATCCCACCAAGTTACCCTTAACAACTTAAGGG +SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=60 IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9ICIIIIIIIIIIIIIIIIIIIIDIII @SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=60 GTTCAGGGATACGACGTTTGTATTTTAAGAATCTGAAGCAGAAGTCGATGATAATACGCG +SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=60 54599&lt;&gt;77977==6=?I6IBI::33344235521677999&gt;&gt;&gt;&lt;&lt;&lt;@@A@BBCDGGBFF Output The output of the gto2_fq_minimum_quality_score program is a set of all the filtered FASTQ reads, followed by the execution report. Using the input above with the minimum averge value as 30, an output example of this is the following: @SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=60 GGGTGATGGCCGCTGCCGATGGCGTCAAATCCCACCAAGTTACCCTTAACAACTTAAGGG + IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9ICIIIIIIIIIIIIIIIIIIIIDIII Total reads : 2 Filtered reads : 1 3.8 Program gto2_fq_minimum_read_size The gto2_fq_minimum_read_size filters the FASTQ reads with the length smaller than the value defined. For help type: ./gto2_fq_minimum_read_size -h In the following subsections, we explain the input and output parameters. Input parameters The gto2_fq_minimum_read_size program needs two streams for the computation, namely the input and output standard. The input stream is a FASTQ file. The attribution is given according to: Usage: ./gto2_fq_minimum_read_size [options] [[--] args] or: ./gto2_fq_minimum_read_size [options] It filters the FASTQ reads with the length smaller than the value defined. If present, it will erase the second header (after +). -h, --help show this help message and exit Basic options -s, --size=&lt;int&gt; The minimum read length &lt; input.fastq Input FASTQ file format (stdin) &gt; output.fastq Output FASTQ file format (stdout) Example: ./gto2_fq_minimum_read_size -s &lt;size&gt; &lt; input.fastq &gt; output.fastq Console output example: &lt;FASTQ non-filtered reads&gt; Total reads : value Filtered reads : value An example of such an input file is: @SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=50 GGGTGATGGCCGCTGCCGATGGCGTCAAATCCCACCAAGTTACCCTTAAC + IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9ICIIIIIIIIIIIIII @SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=60 GTTCAGGGATACGACGTTTGTATTTTAAGAATCTGAAGCAGAAGTCGATGATAATACGCG + IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII6IBIIIIIIIIIIIIIIIIIIIIIIIGI Output The output of the gto2_fq_minimum_read_size program is a set of all the filtered FASTQ reads, followed by the execution report. The execution report only appears in the console. Using the input above with the size values as 55, an output example of this is the following: @SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=60 GTTCAGGGATACGACGTTTGTATTTTAAGAATCTGAAGCAGAAGTCGATGATAATACGCG + IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII6IBIIIIIIIIIIIIIIIIIIIIIIIGI Total reads : 2 Filtered reads : 1 3.9 Program gto2_fq_rand_extra_chars The gto2_fq_rand_extra_chars substitutes the outside ACGT chars by random ACGT symbols in the DNA sequence of FASTQ files. For help type: ./gto2_fq_rand_extra_chars -h In the following subsections, we explain the input and output parameters. Input parameters The gto2_fq_rand_extra_chars program needs two streams for the computation, namely the input and output standard. The input stream is a FASTQ file. The attribution is given according to: Usage: ./gto2_fq_rand_extra_chars [options] [[--] args] or: ./gto2_fq_rand_extra_chars [options] It substitues in the FASTQ files, the DNA sequence the outside ACGT chars by random ACGT symbols. -h, --help show this help message and exit Basic options &lt; input.fastq Input FASTQ file format (stdin) &gt; output.fastq Output FASTQ file format (stdout) Example: ./gto2_fq_rand_extra_chars &lt; input.fastq &gt; output.fastq An example of such an input file is: @SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=60 GNNTGATGGCCGCTGCCGATGGCGNANAATCCCACCAANATACCCTTAACAACTTAAGGG +SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=60 IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9ICIIIIIIIIIIIIIIIIIIIIDIII @SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=60 NTTCAGGGATACGACGNTTGTATTTTAAGAATCTGNAGCAGAAGTCGATGATAATACGCG +SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=60 IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII6IBIIIIIIIIIIIIIIIIIIIIIIIGI Output The output of the gto2_fq_rand_extra_chars program is a FASTQ file. Using the input above, an output example of this is the following: @SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=60 GTGTGATGGCCGCTGCCGATGGCGCATAATCCCACCAACATACCCTTAACAACTTAAGGG +SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=60 IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9ICIIIIIIIIIIIIIIIIIIIIDIII @SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=60 GTTCAGGGATACGACGATTGTATTTTAAGAATCTGCAGCAGAAGTCGATGATAATACGCG +SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=60 IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII6IBIIIIIIIIIIIIIIIIIIIIIIIGI 3.10 Program gto2_fq_from_seq The gto2_fq_from_seq converts a genomic sequence to pseudo FASTQ file format. For help type: ./gto2_fq_from_seq -h In the following subsections, we explain the input and output parameters. Input parameters The gto2_fq_from_seq program needs two streams for the computation, namely the input and output standard. The input stream is a sequence group file. The attribution is given according to: Usage: ./gto2_fq_from_seq [options] [[--] args] or: ./gto2_fq_from_seq [options] It converts a genomic sequence to pseudo FASTQ file format. -h, --help show this help message and exit Basic options &lt; input.seq Input sequence file (stdin) &gt; output.fastq Output FASTQ file format (stdout) Optional options -n, --name=&lt;str&gt; The read&#39;s header -l, --lineSize=&lt;int&gt; The maximum of chars for line Example: ./gto2_fq_from_seq -l &lt;lineSize&gt; -n &lt;name&gt; &lt; input.seq &gt; output.fastq An example of such an input file is: ACAAGACGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGGCCCTGGAGGGTCCACCGCT GCCCTGCTGCCATTGTCCCCGGCCCCACCTAAGGAAAAGCAGCCTCCTGACTTTCCTCGC TTGGGCCGAGACAGCGAGCATATGCAGGAAGCGGCAGGAAGTGGTTTGAGTGGACCTCCG GGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGGAAGCAGGCCAGTGCC GCGAATCCGCGCGCCGGGACAGAATCTCCTGCAAAGCCCTGCAGGAACTTCTTCTGGAAG Output The output of the gto2_fq_from_seq program is a pseudo FASTQ file. An example, using the size line as 60 and the read's header as ''SeqToFastq'', for the input, is: @SeqToFastq1 ACAAGACGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGGCCCTGGAGGGTCCACCGCT + FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF @SeqToFastq2 GCCCTGCTGCCATTGTCCCCGGCCCCACCTAAGGAAAAGCAGCCTCCTGACTTTCCTCGC + FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF @SeqToFastq3 TTGGGCCGAGACAGCGAGCATATGCAGGAAGCGGCAGGAAGTGGTTTGAGTGGACCTCCG + FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF @SeqToFastq4 GGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGGAAGCAGGCCAGTGCC + FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF @SeqToFastq5 GCGAATCCGCGCGCCGGGACAGAATCTCCTGCAAAGCCCTGCAGGAACTTCTTCTGGAAG + FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF 3.11 Program gto2_fq_mutate to do 3.12 Program gto2_fq_split to do 3.13 Program gto2_fq_pack to do 3.14 Program gto2_fq_unpack to do 3.15 Program gto2_fq_quality_score_info to do 3.16 Program gto2_fq_quality_score_min to do 3.17 Program gto2_fq_quality_score_max to do 3.18 Program gto2_fq_cut to do 3.19 Program gto2_fq_minimum_local_quality_score_forward to do 3.20 Program gto2_fq_minimum_local_quality_score_reverse to do 3.21 Program gto2_fq_xs to do 3.22 Program gto2_fq_complement to do 3.23 Program gto2_fq_reverse to do 3.24 Program gto2_fq_variation_map to do 3.25 Program gto2_fq_variation_filter to do 3.26 Program gto2_fq_variation_visual to do 3.27 Program gto2_fq_metagenomics to do "],["amino-acid-tools.html", "Chapter 4 Amino Acid Tools 4.1 gto2_aa", " Chapter 4 Amino Acid Tools 4.1 gto2_aa to do "],["genomic-tools.html", "Chapter 5 Genomic Tools 5.1 gto2_dna", " Chapter 5 Genomic Tools 5.1 gto2_dna to do "],["general-purpose-tools.html", "Chapter 6 General Purpose Tools 6.1 gto2_", " Chapter 6 General Purpose Tools 6.1 gto2_ to do "]]
